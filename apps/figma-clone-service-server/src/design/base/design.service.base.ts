/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Design as PrismaDesign,
  Project as PrismaProject,
} from "@prisma/client";

export class DesignServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DesignCountArgs, "select">): Promise<number> {
    return this.prisma.design.count(args);
  }

  async designs(args: Prisma.DesignFindManyArgs): Promise<PrismaDesign[]> {
    return this.prisma.design.findMany(args);
  }
  async design(
    args: Prisma.DesignFindUniqueArgs
  ): Promise<PrismaDesign | null> {
    return this.prisma.design.findUnique(args);
  }
  async createDesign(args: Prisma.DesignCreateArgs): Promise<PrismaDesign> {
    return this.prisma.design.create(args);
  }
  async updateDesign(args: Prisma.DesignUpdateArgs): Promise<PrismaDesign> {
    return this.prisma.design.update(args);
  }
  async deleteDesign(args: Prisma.DesignDeleteArgs): Promise<PrismaDesign> {
    return this.prisma.design.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.design
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
