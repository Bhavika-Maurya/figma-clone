/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollaboratorService } from "../collaborator.service";
import { CollaboratorCreateInput } from "./CollaboratorCreateInput";
import { Collaborator } from "./Collaborator";
import { CollaboratorFindManyArgs } from "./CollaboratorFindManyArgs";
import { CollaboratorWhereUniqueInput } from "./CollaboratorWhereUniqueInput";
import { CollaboratorUpdateInput } from "./CollaboratorUpdateInput";

export class CollaboratorControllerBase {
  constructor(protected readonly service: CollaboratorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Collaborator })
  async createCollaborator(
    @common.Body() data: CollaboratorCreateInput
  ): Promise<Collaborator> {
    return await this.service.createCollaborator({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        role: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Collaborator] })
  @ApiNestedQuery(CollaboratorFindManyArgs)
  async collaborators(@common.Req() request: Request): Promise<Collaborator[]> {
    const args = plainToClass(CollaboratorFindManyArgs, request.query);
    return this.service.collaborators({
      ...args,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        role: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Collaborator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collaborator(
    @common.Param() params: CollaboratorWhereUniqueInput
  ): Promise<Collaborator | null> {
    const result = await this.service.collaborator({
      where: params,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        role: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Collaborator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollaborator(
    @common.Param() params: CollaboratorWhereUniqueInput,
    @common.Body() data: CollaboratorUpdateInput
  ): Promise<Collaborator | null> {
    try {
      return await this.service.updateCollaborator({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          role: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Collaborator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollaborator(
    @common.Param() params: CollaboratorWhereUniqueInput
  ): Promise<Collaborator | null> {
    try {
      return await this.service.deleteCollaborator({
        where: params,
        select: {
          createdAt: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          role: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
